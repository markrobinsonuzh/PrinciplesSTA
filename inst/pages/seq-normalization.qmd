# Normalization {#sec-seq-normalization}

## Introduction

Here we apply normalization methods developed for single-cell RNA-seq data, treating each spot as equivalent to one cell.


## Load previously saved data

We start by loading the previously saved data object(s) (see @sec-seq-quality-control-save-objects).

```{r, message=FALSE, results='hide'}
library(SpatialExperiment)
spe <- readRDS("seq-spe_qc.rds")
```


## Logcounts

Calculate log-transformed normalized counts (abbreviated as "logcounts") using library size factors.

We apply the methods implemented in the `scater` [@McCarthy2017] and `scran` [@Lun2016] packages, which were originally developed for single-cell RNA-seq data, making the assumption here that these methods can be applied to spatial transcriptomics data by treating spots as equivalent to cells.

We use the library size factors methodology since this is the simplest approach, and can easily be applied to spatial transcriptomics data. Alternative approaches that are popular for single-cell RNA-seq data, including normalization by deconvolution, are more difficulty to justify in the context of spot-based spatial transcriptomics data since (i) spots may contain multiple cells from more than one cell type, and (ii) datasets can contain multiple samples (e.g. multiple Visium slides, resulting in sample-specific clustering).

```{r, message=FALSE, fig.height=3.5}
library(scran)

# calculate library size factors
spe <- computeLibraryFactors(spe)

summary(sizeFactors(spe))
hist(sizeFactors(spe), breaks = 20)

# calculate logcounts and store in object
spe <- logNormCounts(spe)

# check
assayNames(spe)
dim(counts(spe))
dim(logcounts(spe))
```


## Save objects for later chapters {#sec-seq-normalization-save-objects}

We also save the object(s) in `.rds` format for re-use within later chapters to speed up the build time of the book.

```{r}
# save object(s)
saveRDS(spe, file = "seq-spe_logcounts.rds")
```


## References {.unnumbered}
