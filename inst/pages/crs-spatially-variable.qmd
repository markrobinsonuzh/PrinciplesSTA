# Spatially variable genes {#sec-crs-spatially-variable-genes}

## Preamble

### Introduction

Methods to identify spatially variable genes (SVGs) aim to find a list of top-ranked genes with strong spatial patterns of expression. These methods can be used as an a spatially-aware alternative to feature selection methods described in @sec-seq-normalize-featselect-dimred, or to identify individual biologically informative genes as candidates for further experimental follow-up.

Here, we define SVGs as any genes with spatially correlated patterns of expression across the tissue area.

Several methods to identify SVGs in ST data have recently been developed, which each have various methodological and computational tradeoffs. These include:

- **nnSVG**: available as an R package from [Bioconductor](https://bioconductor.org/packages/nnSVG) and described by @Weber2023

- **SPARK-X**: available as an R package from [GitHub](https://xzhoulab.github.io/SPARK/) and described by @Zhu2021

- **SPARK**: available as an R package from [GitHub](https://xzhoulab.github.io/SPARK/) and described by @Sun2020

- **SpatialDE**: available as a Python package from [GitHub](https://github.com/Teichlab/SpatialDE) and described by @Svensson2018

Alternatively, standard statistical metrics such as [Moran's I](https://en.wikipedia.org/wiki/Moran%27s_I) statistic or [Geary's C](https://en.wikipedia.org/wiki/Geary%27s_C) statistic may also be used to rank genes by their observed spatial autocorrelation. However, the methods above tend to be more sensitive, since they have been developed for the specific properties of ST data.


### Dependencies

Load data object containing logcounts previously saved in @sec-seq-normalize-featselect-dimred:

```{r, message=FALSE}
library(SpatialExperiment)
spe <- readRDS("seq-spe_logcounts.rds")
```

Load additional dependencies for this chapter:

```{r, message=FALSE}
library(scater)
library(nnSVG)
```


## nnSVG

Here, we demonstrate a short example showing how to identify a set of top SVGs using [nnSVG](https://bioconductor.org/packages/nnSVG) [@Weber2023]. This method is available in Bioconductor and can be easily integrated into Bioconductor-based workflows.

First, remove mitochondrial genes, since these are very highly expressed in this dataset and are not of main biological interest.

```{r, message=FALSE}
# identify mitochondrial genes
is_mito <- grepl("(^MT-)|(^mt-)", rowData(spe)$gene_name)
table(is_mito)

# remove mitochondrial genes
spe <- spe[!is_mito, ]
dim(spe)
```

In this example, we run nnSVG using a small subset of the dataset for faster runtime. We select a subset by subsampling on the set of spots and including stringent filtering for low-expressed genes. A full analysis using all spots for this dataset and default filtering parameters for Visium data from human brain tissue takes around 45 minutes for one Visium sample on a standard laptop.

```{r}
# subsample spots for faster runtime in this example
# note: skip this step in full analysis
n <- 100
set.seed(123)
ix <- sample(seq_len(n), n)
spe_nnSVG <- spe[, ix]

# filter low-expressed and mitochondrial genes
# using stringent filtering for faster runtime in this example
# note: use default filtering in full analysis
spe_nnSVG <- filter_genes(
  spe_nnSVG, filter_genes_ncounts = 10, filter_genes_pcspots = 3
)

# re-calculate logcounts after filtering
spe_nnSVG <- logNormCounts(spe_nnSVG)
```

```{r}
# run nnSVG
set.seed(123)
spe_nnSVG <- nnSVG(spe_nnSVG)
```

```{r}
# investigate results

# show results
head(rowData(spe_nnSVG), 3)

# number of significant SVGs
table(rowData(spe_nnSVG)$padj <= 0.05)

# show results for top n SVGs
rowData(spe_nnSVG)[order(rowData(spe_nnSVG)$rank)[1:6], ]

# identify top-ranked SVG
rowData(spe_nnSVG)$gene_name[which(rowData(spe_nnSVG)$rank == 1)]
```


::: {.callout-note collapse="true" title="Downstream analyses"}

The set of top SVGs from nnSVG may then be investigated further, e.g. by plotting the spatial expression of several top genes and by comparing the list of top genes with known gene sets associated with biological processes of interest in the dataset. The set of top SVGs may also be used as the input for further downstream analyses such as spatially-aware clustering to define spatial domains (see @sec-seq-clustering).

:::


## Appendix

### References {.unnumbered}
